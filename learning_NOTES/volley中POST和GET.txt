GET：get请求不多做解释，如果有参数，直接拼接在url尾处。
==================================================================================
POST:
使用post请求的时候，如果需要携带参数，就必须在生成实例的时候重写Request的getParams()方法，返回的是一个Map集合。

<!-- 第一种方法是将参数封装成一个json，当参数传入request中--!>
1. RequestQueue queue = Volley.newRequestQueue(this);
//构造post请求参数
2. JSONObject params = new JSONObject();
   params .put("name","aaaaaa");
   params .put("password","bbbbbb");

3.JsonObjectRequest request = new JsonObjectRequest(
	Request.Method.POST,
	"url",params,
	new Response.Listener<JSONObject>(){
		@Overrid
		public void onResponse(JSONObject o){
			Log.e(TAG,o.toString);
		}
	},
	new Response.Listener<JSONObject>(){
		@Overrid
		public void onErrorResponse(VolleyError e){
			Log.e(TAG,e.getMessage());
		}
	}
){
	@Overrid
	public Map<String,String> getHeaders(){
		HashMap<String, String> headers = new HashMap<String, String>();
        	headers.put("Accept", "application/json");
        	headers.put("Content-Type", "application/json; charset=UTF-8");
		return headers ;
	} 
};
4.queue.add(request);

但是有的服务器不接受json格式的请求参数，比如spring MVC服务端，这个时候就需要用到第二种方法。

<!-- 第二种方法，定制一个request，使用普通方式提交post请求，返回json字符串--!>

public class MyRequest extends Request<JSONObject>{
	private Map<String,String> params;
	private Listener<JSONObject> listener;
	
	public MyRequest(String url,Listener<JSONObject> l,ErrorListener el,Map<String,String> params){
		super(Request.Method.POST, url, errorListener);
		this.params = params;
		this.listener = l;
	}	
	
	@Override
    	protected Map<String, String> getParams() throws AuthFailureError {
        	return params;
    	}
     	
	@Override
	protected Response<JSONObject> parseNetworkResponse(NetworkResponse p){
		try{
			String jsonString = new String(p.data,HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
			return Response.success(new JSONObject(jsonString),HttpHeaderParser.parseCacheHeaders(response));
		}catch (UnsupportedEncodingException e) {
            		return Response.error(new ParseError(e));
        	} catch (JSONException je) {
          		return Response.error(new ParseError(je));
       		}
	}

	@Override
    	protected void deliverResponse(JSONObject response) {
        	mListener.onResponse(response);
    	}

}
定制好自己的Request后，正常调用即可，就不需要使用JSONObjectRequest了。